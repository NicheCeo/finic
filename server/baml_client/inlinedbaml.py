###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview",
    "copilot.baml": "class Attribute {\n  name string\n  value string\n}\n\nclass Element {\n  tagName string\n  attributes Attribute[]\n  textContent string\n  outerHTML string\n}\n\nenum InputDataType {\n  TEXT\n  NUMBER\n}\n\nclass ResponseFormat {\n  elementIdentifier string @description(\"A descriptive identifier for this element, for example: 'login-button'\")\n  code string\n}\n\nfunction GeneratePlaywrightCode(intent: string, element: Element, existing_code: string) -> ResponseFormat {\n  client \"anthropic/claude-3-5-sonnet-20240620\"\n  prompt #\"\n    Given a the user's intent and info about an element on a web page, generate python code that uses Playwright to interact with the page according to the user's intent. \n    Use `finic.selectors.get(<element_identifier>)` to get the selector for the element, using the elementIdentifier from the response format.\n    \n    The existing code is provided. You should generate code that starts on the line exactly after the last line of the existing code.\n\n    User's intent: {{ intent }}\n\n    Element info:\n    {{ element }}\n\n    Existing code:\n    ```python\n    {{ existing_code }}\n    ```\n\n    Make sure to provide the code response as a markdown code block and start your response as follows:\n    ```python\n\n    {{ ctx.output_format }}\n  \"#\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.60.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
}

def get_baml_files():
    return file_map